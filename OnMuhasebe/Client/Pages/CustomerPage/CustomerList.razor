@page "/customerlist"
@using Newtonsoft.Json
@using OnMuhasebe.Application.CustomExceptions
@using OnMuhasebe.Application.DTOs
@using OnMuhasebe.Application.DTOs.OtherDTOS
@using OnMuhasebe.Application.Json
@using OnMuhasebe.Client.CustomComponents.Grid
@using OnMuhasebe.Client.Utils

<RadzenButton Shade="Shade.Dark" Click=goCreateUserPage Icon="add" Variant="Variant.Flat" Text="Yeni Ürün Ekle" ButtonStyle="ButtonStyle.Success" />
<Grid Columns="Columns" Data="CustomerLists" UIWithT="RenderColumn" UIWithT2="RenderColumn" TItem="CustomerDTO" OnDeleteAction="DeleteUser" OnEditAction="goUpdateUserPage"/>

@code {
    [Inject]
    public HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }

    public List<ColumnConfig> columnConfigs;
    List<RadzenDataGridColumn<CustomerDTO>> Columns = new List<RadzenDataGridColumn<CustomerDTO>>();
    DynamicGrid<CustomerDTO> gridList = new DynamicGrid<CustomerDTO>();
    protected IEnumerable<CustomerDTO>CustomerLists;
    private RenderFragment<RadzenDataGridColumn<CustomerDTO>> RenderColumn = (column) =>@<RadzenDataGridColumn TItem="CustomerDTO" Property="@(column.Property)" Title="@(column.Title)">

    </RadzenDataGridColumn>;
    protected async override Task OnInitializedAsync()
    {
        await LoadList();
    }
    protected void goCreateUserPage()
    {
        NavigationManager.NavigateTo("/customers/add");
    }

    protected void goUpdateUserPage(Guid UserId)
    {
        NavigationManager.NavigateTo("/customers/edit/" + UserId);
    }

    protected async void DeleteUser(Guid Id)
    {
        bool confirmed = await ModalManager.ConfirmationAsync("Confirmation", "Ürünü Silmek İstediğinize eminmisiniz ?");

        if (!confirmed) return;

        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            bool deleted = await Client.PostGetServiceResponseAsync<bool, Guid>("api/customer/Delete", Id, token, true);

            await LoadList();
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Customer Deletion Error", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("An Error", ex.Message);
        }
    }


    protected async Task LoadList()
    {
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            CustomerLists = await Client.GetServiceResponseAsync<List<CustomerDTO>>("api/Customer/Customers", token, true);
            columnConfigs = JsonConvert.DeserializeObject<List<ColumnConfig>>(CustomerJson.json);
            gridList.GenerateColumnsFromType(null, columnConfigs);

            foreach (var item in gridList.Columns)
            {
                Columns.Add(item);
            }
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }
    }
}
