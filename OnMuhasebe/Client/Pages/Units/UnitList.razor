@page "/Unitlist"
@using OnMuhasebe.Application.CustomExceptions
@using OnMuhasebe.Application.DTOs
@using OnMuhasebe.Client.Utils
<RadzenButton Shade="Shade.Dark" Click=goCreateUnitPage Icon="add" Variant="Variant.Flat" Text="Yeni Birim Ekle" ButtonStyle="ButtonStyle.Success" />
<RadzenDataGrid AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                ShowCellDataAsTooltip="true"
                ColumnWidth="200px"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowColumnPicking="true"
                AllowPaging="true" PageSize="10"
                AllowSorting="true" Data="@UnitLists"
                TItem="UnitDTO">
    <Columns>
        <RadzenDataGridColumn TItem="UnitDTO" Context="unit" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="unit">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(() => goUpdateUnitPage(unit.Id))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeleteUnit(unit.Id))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="UnitDTO" Property="Id" Title="Id">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="UnitDTO" Property="UnitName" Title="Birim Adı" />
        <RadzenDataGridColumn TItem="UnitDTO" Property="CreateDate" Title="Kayıt Tarihi">
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Inject]
    public HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }

    protected IEnumerable<UnitDTO> UnitLists;
  
    protected async override Task OnInitializedAsync()
    {
        await LoadList();
    }
    protected async Task LoadList()
    {
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            UnitLists = await Client.GetServiceResponseAsync<List<UnitDTO>>("api/Unit/Units", token, true);
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }
    }
    protected void goCreateUnitPage()
    {
        NavigationManager.NavigateTo("/units/add");
    }
    protected void goUpdateUnitPage(Guid UnitId)
    {
        NavigationManager.NavigateTo("/units/edit/" + UnitId);
    }
    protected async Task DeleteUnit(Guid Id)
    {
        bool confirmed = await ModalManager.ConfirmationAsync("Confirmation", "User will be deleted. Are you sure?");

        if (!confirmed) return;

        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            bool deleted = await Client.PostGetServiceResponseAsync<bool, Guid>("api/Unit/Delete", Id, token, true);

            await LoadList();
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Unit Deletion Error", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("An Error", ex.Message);
        }
    }


}
