// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnMuhasebe.Persistence.Context;

#nullable disable

namespace OnMuhasebe.Persistence.Migrations
{
    [DbContext(typeof(OnMuhasebePsqlDbContext))]
    [Migration("20231222224736_mig_dbcreate")]
    partial class mig_dbcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnMuhasebe.Domain.Models.BaseModels.BaseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Bank", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AuthName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AuthPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IbanNo")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.BankMotion", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<int>("BankMotionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Customer", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("AuthName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("DiscountRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("InvoiceTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PersonPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RiskLimit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SpecialCodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasIndex("SpecialCodeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Discount", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<decimal>("DiscountRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Employee", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmployeeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("MonthlySalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("PrimRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("TaskNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaskOffice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("WorkOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.EmployeeMotion", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MonthlySalary")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PrimRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.FastSale", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("FastSaleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("FastSaleGroupId");

                    b.HasIndex("ProductId");

                    b.ToTable("FastSales");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.FastSaleGroup", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("FastSaleGroups");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Kdv", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("KdvName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("KdvRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.ToTable("Kdvs");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.PaymentType", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("PaymentTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Price", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KdvId")
                        .HasColumnType("uuid");

                    b.Property<int>("PriceType")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("KdvId");

                    b.HasIndex("ProductId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Product", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuaranteePeriod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductUnderGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductUnderGroupId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductGroup", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("ProductGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductMotion", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("KdvId")
                        .HasColumnType("uuid");

                    b.Property<int>("MotionType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasIndex("KdvId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductUnderGroup", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductUnderGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductUnderGroups");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SafeBox", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("AuthCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SafeBoxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SafeBoxName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.ToTable("SafeBoxes");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SafeBoxMotion", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("SafeBoxId")
                        .HasColumnType("uuid");

                    b.Property<int>("SafeBoxMotionType")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SafeBoxId");

                    b.ToTable("SafeBoxMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SpecialCode", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SpecialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ProductId");

                    b.ToTable("SpecialCodes");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Unit", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.User", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Voucher", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Debt")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Owed")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VoucherType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Warehouse", b =>
                {
                    b.HasBaseType("OnMuhasebe.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AuthCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuthName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.BankMotion", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Bank", "Bank")
                        .WithMany("BankMotions")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Customer", "Customer")
                        .WithMany("BankMotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Customer", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.SpecialCode", "SpecialCode")
                        .WithMany()
                        .HasForeignKey("SpecialCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialCode");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Discount", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.EmployeeMotion", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Employee", "Employee")
                        .WithMany("EmployeeMotions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.FastSale", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.FastSaleGroup", "FastSaleGroup")
                        .WithMany()
                        .HasForeignKey("FastSaleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FastSaleGroup");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Price", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Kdv", "Kdv")
                        .WithMany("Prices")
                        .HasForeignKey("KdvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kdv");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Product", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.ProductUnderGroup", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductUnderGroupId");

                    b.HasOne("OnMuhasebe.Domain.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductMotion", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Kdv", "Kdv")
                        .WithMany()
                        .HasForeignKey("KdvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Product", "Product")
                        .WithMany("ProductMotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Warehouse", "Warehouse")
                        .WithMany("ProductMotions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kdv");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductUnderGroup", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.ProductGroup", "ProductGroup")
                        .WithMany("ProductUnderGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SafeBox", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Customer", null)
                        .WithMany("SafeBoxes")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SafeBoxMotion", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.PaymentType", "PaymentType")
                        .WithMany("SafeBoxMotions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.SafeBox", "SafeBox")
                        .WithMany("SafeBoxMotions")
                        .HasForeignKey("SafeBoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentType");

                    b.Navigation("SafeBox");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SpecialCode", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Product", "Product")
                        .WithMany("SpecialCodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Voucher", b =>
                {
                    b.HasOne("OnMuhasebe.Domain.Models.Bank", "Bank")
                        .WithMany("Vouchers")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Customer", "Customer")
                        .WithMany("Vouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnMuhasebe.Domain.Models.Employee", null)
                        .WithMany("Vouchers")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("OnMuhasebe.Domain.Models.Warehouse", null)
                        .WithMany("Vouchers")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Bank");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Bank", b =>
                {
                    b.Navigation("BankMotions");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Customer", b =>
                {
                    b.Navigation("BankMotions");

                    b.Navigation("SafeBoxes");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmployeeMotions");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Kdv", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.PaymentType", b =>
                {
                    b.Navigation("SafeBoxMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Product", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("ProductMotions");

                    b.Navigation("SpecialCodes");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductGroup", b =>
                {
                    b.Navigation("ProductUnderGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.ProductUnderGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.SafeBox", b =>
                {
                    b.Navigation("SafeBoxMotions");
                });

            modelBuilder.Entity("OnMuhasebe.Domain.Models.Warehouse", b =>
                {
                    b.Navigation("ProductMotions");

                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
